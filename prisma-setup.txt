Step 1: npm install prisma --save-dev (in terminal)
Step 2: npx prisma init --datasource-provider mongodb --output ../generated/prisma (in terminal)

Step 3: get the mongodb connection string Example (mongodb+srv://username:password@cluster0.xxxx000.mongodb.net/name) in your .env file

Step 4: Add prisma.js in /lib/prisma.{js,ts}
```
    import { PrismaClient } from "@prisma/client";

    const prisma = new PrismaClient();

    export default prisma;
```

Step 5: add in prisma/schema.prisma (folder)

Example: 

model Test {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String @unique
}

Step 6: Generate client types: npx prisma generate (terminal)
Step 7: Push to MongoDB: npx prisma db push (terminal)


Optional: View Prisma Studio locally: npx prisma studio (terminal)


To create data

for creating form create a actions folder inside lib folder and add form.js

"use server";

import prisma from "../prisma";

export const submitForm = async (data) => {
  const { name, email, message, services, isConsentGiven } = data;

  try {
    // Ensure services is an array of strings
    const servicesArray = Array.isArray(services) ? services : [];

    const result = await prisma.form.create({
      data: {
        name,
        email,
        message,
        services: servicesArray,
        isConsentGiven,
      },
    });

    return {
      success: true,
      message: "Form submitted successfully.",
      data: result,
    };
  } catch (error) {
    console.error("Error submitting form:", error);
    return {
      success: false,
      message: "Failed to submit form.",
      error: error.message,
    };
  }
};

and to connect form to front end follow all the steps from shadcn form and add this onSubmit file

const onSubmit = async (values) => {
    setIsLoading(true);
    try {
      const response = await submitForm(values);
      toast.success(response.message);
      form.reset();
      setIsLoading(false);
    } catch (error) {
      toast.error("Failed to submit form.");
      setIsLoading(false);
    }
  };